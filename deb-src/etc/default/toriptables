#!/bin/bash
### BEGIN INIT INFO
# Provides:          toryptables
# Required-Start:    
# Required-Stop:     
# Default-Start:     
# Default-Stop:       
# Short-Description: Transparent proxy
# Description:       Transparent proxy for routing all traffic over Tor 
### END INIT INFO

#===============================================================================
#
#          FILE:  toriptables.sh
# 
#         USAGE:  ./toriptables.sh 
# 
#   DESCRIPTION:  Routing Traffic over Tor for anonymizer pentesting
# 	Copyright (C) 2016 Teeknofil
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  Contact teeknofil-dev@gmail.com for bug.
#        AUTHOR:  Teeknofil 
#       COMPANY:  Anonymous freelance.
#       VERSION:  1.0
#       CREATED:  18/07/2016 05:42:31 CEST
#      REVISION:  ---
#===============================================================================

###########################
## debugging
###########################

#set -x 


#######
####### Global variable
#######

BOLD="\033[01;01m" # Higligh
BLUE='\033[1;94m'
GREEN='\e[0;32m'   # Success
YELLOW='\e[01;33m' # Warning/Information 
RED='\033[1;91m'   # Error
RESET="\033[00m"   # Normal

ColorEcho()
{
  echo -e "${1}${2}$RESET"  
}

OK=$(ColorEcho $GREEN "[ OK ]")
TASK=$(ColorEcho $GREEN "[+]")


###########################
## error_handler
###########################

set -o pipefail

error_handler() {
  echo "##################################################"
  echo "Toriptables firewall script failed!"
  echo "##################################################"
  exit 1
}



###########################
## TOR_EXCLUDE
###########################

### set variables
#destinations you don't want routed through Tor
TOR_EXCLUDE="\
         127.0.0.0-127.0.0.24 \
         192.168.0.0-192.168.0.24 \
         172.16.0.0-172.16.255.255 \
         10.0.0.0-10.255.255.255 \
         "

         
###########################
## USERS
###########################

#the UID that Tor runs as (varies from system to system)
[ -n "$TOR_USER" ] || TOR_USER="$(id -u debian-tor)"


###########################
## ports
###########################

## The following ports are used
##
## The following applications will be separated, preventing identity
## correlation through circuit sharing.

## Transparent Proxy Ports 
[ -n "$TRANS_PORT" ] || TRANS_PORT="9040"
[ -n "$DNS_PORT" ] || DNS_PORT="5300"



###########################
## PREPARATION
###########################

socks_ports_list="$(compgen -v | grep SOCKS\_PORT\_)"




echo -e "\n$TASK $YELLOW Loading Toriptables firewall... $RESET            \n";

###########################
## IPv4 PREPARATIONS
###########################

## Flush old rules.

ClearIptables()
{
  
	if [ -f /usr/bin/iptables-flush ] ; then
		/bin/bash /usr/bin/iptables-flush
	fi
}

#########################
# DefaultPolicies       #
#########################

DefaultPolicies()
{
  



	  ######### Les instructions qui suivent concernent la table « filter » 
	  ######### Les politiques par défaut déterminent le devenir d'un paquet auquel
	  ######### aucune règle spécifique ne s'applique.
	  #### On bloque tout les connexion entrantes et sortantes.

	  echo -e "\n$TASK Policy rules                               : $YELLOW[ Start Initialization ]$RESET\n"


	  ### Allow loopback
	  ## Traffic on the loopback interface is accepted.
	  iptables -t filter -A INPUT  -i lo  -j ACCEPT

	  iptables -t filter -A OUTPUT -o lo  -j ACCEPT
	  echo -e " $GREEN*$RESET Allow loopback                                : $OK"

	  #### Set secure defaults.

	  ## Reject anything not explicitly allowed above.
	  ## Drop is better than reject here, because we do not want to reveal it's a Linux.

	  iptables -P INPUT DROP
	  echo -e " $GREEN*$RESET Block all connect INPUT                       : $OK"
	  
	  ## FORWARD rules does not actually do anything if forwarding is disabled. Better be safe just in case.
	  iptables -P FORWARD DROP
	  echo -e " $GREEN*$RESET Block all connect FORWARD                     : $OK"
	  
	  iptables -P OUTPUT DROP
	  echo -e " $GREEN*$RESET Block all connect OUTPUT                      : $OK"

	  echo -e "\n $GREEN*$RESET Policy by defaut                              : $OK"


	  #### Accept incoming packets relating to already established connections: 
	  #### this goes faster than having to re-examine all the rules for each packet.
	  #### Established incoming connections are accepted.
	  iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	  ## Existing connections are accepted.
	  iptables -A OUTPUT -m state --state ESTABLISHED,NEW -j ACCEPT

}



###########################
## IPv4 DEFAULTS
###########################


Forwarding()
{
	###########################
	## IPv4 OUTPUT
	###########################
	iptables  -t nat -A OUTPUT -m owner --uid-owner "$TOR_USER" -j RETURN
	 
	## Redirect  all  other pre-routing and output to DNS_PORT Tor
	iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT"
	iptables -t nat -A PREROUTING -i eth0 -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT"
	iptables -t nat -A PREROUTING -i wlan0 -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT"


	# Allow outgoing 9050
	iptables -A OUTPUT -p tcp --match multiport --sport 9050,9051,9001 --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW,ESTABLISHED -j ACCEPT
	iptables -A OUTPUT -p tcp --match multiport --sport 9050,9051,9001 --tcp-flags FIN,SYN,RST,ACK SYN -m state --state ESTABLISHED -j ACCEPT

	
	## Exclude connections to local network from being redirected through Tor,

	for NET in $TOR_EXCLUDE; do
	    iptables -t nat -A OUTPUT -m iprange --dst-range "$NET" -j RETURN
	done


	## Redirect all TCP traffic to TRANS_PORT
	iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT"
	iptables -t nat -A PREROUTING -i eth0 -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT"
	iptables -t nat -A PREROUTING -i wlan0 -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT"
	iptables -t nat -A OUTPUT -o eth0 -p udp -j REDIRECT --to-ports "$TRANS_PORT"
	iptables -t nat -A OUTPUT -o eth0 -p icmp -j REDIRECT --to-ports "$TRANS_PORT"
	iptables -t nat -A OUTPUT -o wlan0 -p udp -j REDIRECT --to-ports "$TRANS_PORT"
	iptables -t nat -A OUTPUT -o wlan0 -p icmp -j REDIRECT --to-ports "$TRANS_PORT"

	## Accept outgoing connections to local network
	for NET in $TOR_EXCLUDE_; do
	     iptables -A OUTPUT -m iprange --dst-range "$NET" -j ACCEPT
	done

	iptables -A OUTPUT -m owner --uid-owner "$TOR_USER" -j ACCEPT



}

IPv6RulesTable()
{

	###########################
	## IPv6
	###########################

	## Policy DROP for all traffic as fallback.
	ip6tables -P INPUT DROP
	ip6tables -P OUTPUT DROP
	ip6tables -P FORWARD DROP

	## Flush old rules.
	ip6tables -F
	ip6tables -X
	ip6tables -t mangle -F
	ip6tables -t mangle -X

	## Allow unlimited access on loopback.
	## Not activated, since we do not need it.
	ip6tables -A INPUT -i lo -j ACCEPT
	ip6tables -A OUTPUT -o lo -j ACCEPT

	## Drop/reject all other traffic.
	ip6tables -A INPUT -j DROP
	## --reject-with icmp-admin-prohibited not supported by ip6tables
	ip6tables -A OUTPUT -j REJECT
	## --reject-with icmp-admin-prohibited not supported by ip6tables
	ip6tables -A FORWARD -j REJECT
}



################################# 
#                               #
#     Main                      #
#                               # 
#################################

DefaultPolicies
Forwarding
IPv6RulesTable

echo -e "·\n $GREEN*$RESET Toriptables firewall loaded.                  : $OK"

exit 0

###########################
## End
###########################
